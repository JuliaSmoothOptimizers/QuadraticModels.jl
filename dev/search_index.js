var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"​","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [QuadraticModels]","category":"page"},{"location":"reference/#QuadraticModels.QuadraticModel","page":"Reference","title":"QuadraticModels.QuadraticModel","text":"qp = QuadraticModel(c, Hrows, Hcols, Hvals; Arows = Arows, Acols = Acols, Avals = Avals, \n                    lcon = lcon, ucon = ucon, lvar = lvar, uvar = uvar, sortcols = false)\n\nqp = QuadraticModel(c, H; A = A, lcon = lcon, ucon = ucon, lvar = lvar, uvar = uvar)\n\nCreate a Quadratic model min tfrac12 x^T H x + c^T x + c_0 with optional bounds lvar ≦ x ≦ uvar and optional linear constraints lcon ≦ Ax ≦ ucon. The user should only give the lower triangle of H to the QuadraticModel constructor.\n\nWith the first constructor, if sortcols = true, then Hcols and Acols are sorted in ascending order  (Hrows, Hvals and Arows, Avals are then sorted accordingly).\n\nYou can also use QPSReader.jl to create a Quadratic model from a QPS file:\n\nusing QPSReader\nqps = readqps(\"QAFIRO.SIF\")\nqp = QuadraticModel(qps)\n\nThe instance of QuadraticModel{T, S, D} created contains the fields:\n\nmeta of type NLPModels.NLPModelMeta  from NLPModels.jl,\ndata, of type QuadraticModels.QPData depending on the input types of the A and H matrices.\ncounters of type NLPModels.Counters from NLPModels.jl.\n\nUsing NLPModelsModifiers.SlackModel from NLPModelsModifiers.jl with a QuadraticModel  based on a QPData with dense matrices will convert the field data to a QPData with SparseMatricesCOO.  \n\nIts in-place variant SlackModel! specific to QuadraticModels will only work with a QuadraticModel based on a QPData with SparseMatricesCOO.\n\n\n\n\n\n","category":"type"},{"location":"reference/#QuadraticModels.QuadraticModel-Union{Tuple{S}, Tuple{T}, Tuple{NLPModels.AbstractNLPModel{T, S}, AbstractVector}} where {T, S}","page":"Reference","title":"QuadraticModels.QuadraticModel","text":"QuadraticModel(nlp, x)\n\nCreates a quadratic Taylor model of nlp around x.\n\n\n\n\n\n","category":"method"},{"location":"reference/#QuadraticModels.empty_rows!-Union{Tuple{T}, Tuple{Any, Vector{T}, Vector{T}, Any, Vector{Int64}, Vector{Int64}}} where T","page":"Reference","title":"QuadraticModels.empty_rows!","text":"new_ncon = empty_rows!(Arows, lcon, ucon, ncon, row_cnt, empty_rows)\n\nRemoves the empty rows of A, and the corresponding elements in lcon and ucon that are in empty_rows. row_cnt is a vector of the number of elements per row.\n\nReturns the new number of constraints new_ncon and updates in-place Arows, lcon, ucon.\n\n\n\n\n\n","category":"method"},{"location":"reference/#QuadraticModels.postsolve-Union{Tuple{S}, Tuple{T}, Tuple{QuadraticModel{T, S}, QuadraticModels.PresolvedQuadraticModel{T, S}, S, S, SparseArrays.SparseVector{T, Int64}, SparseArrays.SparseVector{T, Int64}}} where {T, S}","page":"Reference","title":"QuadraticModels.postsolve","text":"x, y, s_l, s_u = postsolve(qm::QuadraticModel{T, S}, psqm::PresolvedQuadraticModel{T, S}, \n                           x_in::S, y_in::S,\n                           s_l_in::SparseVector{T, Int},\n                           s_u_in::SparseVector{T, Int}) where {T, S}\n\nRetrieve the solution x, y, s_l, s_u of the original QP qm given the solution of the presolved QP (psqm) x_in, y_in, s_l_in, s_u_in.\n\n\n\n\n\n","category":"method"},{"location":"reference/#QuadraticModels.presolve-Union{Tuple{QuadraticModel{T, S, M1, M2}}, Tuple{M2}, Tuple{M1}, Tuple{S}, Tuple{T}} where {T<:Real, S, M1<:SparseMatricesCOO.SparseMatrixCOO, M2<:SparseMatricesCOO.SparseMatrixCOO}","page":"Reference","title":"QuadraticModels.presolve","text":"stats_ps = presolve(qm::QuadraticModel{T, S}; kwargs...)\n\nApply a presolve routine to qm and returns a  GenericExecutionStats from the package SolverCore.jl. The presolve operations currently implemented are:\n\nempty_rows! : remove empty rows\nsingleton_rows! : remove singleton rows\nunconstrained_reductions! : fix linearly unconstrained variables (lps)\nremove_ifix! : remove fixed variables\n\nThe PresolvedQuadraticModel{T, S} <: AbstractQuadraticModel{T, S} is located in the solver_specific field:\n\npsqm = stats_ps.solver_specific[:presolvedQM]\n\nand should be used to call postsolve.\n\nIf the presolved problem has 0 variables, stats_ps.solution contains a solution of the primal problem, stats_ps.multipliers is a zero SparseVector, and, if we define\n\ns = qm.data.c + qm.data.H * stats_ps.solution\n\nstats_ps.multipliers_L is the positive part of s and stats_ps.multipliers_U is the opposite of the negative part of s. \n\n\n\n\n\n","category":"method"},{"location":"reference/#QuadraticModels.remove_ifix!-Union{Tuple{T}, Tuple{Any, Any, Any, Any, Any, Any, Any, Any, AbstractVector{T}, Any, Any, Any, Any, Any, Any, Any, Any}} where T","page":"Reference","title":"QuadraticModels.remove_ifix!","text":"xrm, c0ps, nvarrm = remove_ifix!(ifix, Hrows, Hcols, Hvals, nvar, \n                                 Arows, Acols, Avals, c, c0, \n                                 lvar, uvar, lcon, ucon)\n\nRemove rows and columns in H, columns in A, and elements in lcon and ucon corresponding to fixed variables, that are in ifix (They should be the indices i where lvar[i] == uvar[i]).\n\nReturns the removed elements of lvar (or uvar), the constant term in the QP objective c0ps resulting from the fixed variables, and the new number of variables nvarrm. Hrows, Hcols, Hvals, Arows, Acols, Avals, c, lvar, uvar, lcon and ucon are updated in-place.\n\n\n\n\n\n","category":"method"},{"location":"reference/#QuadraticModels.singleton_rows!-Union{Tuple{T}, Tuple{Any, Any, Any, Vector{T}, Vector{T}, Any, Any, Any, Any, Vector{Int64}, Vector{Int64}}} where T","page":"Reference","title":"QuadraticModels.singleton_rows!","text":"new_ncon = singleton_rows!(Arows, Acols, Avals, lcon, ucon,\n                           lvar, uvar, nvar, ncon, row_cnt, singl_rows)\n\nRemoves the singleton rows of A, and the corresponding elements in lcon and ucon that are in singl_rows. row_cnt is a vector of the number of elements per row.\n\nReturns the new number of constraints new_ncon and updates in-place Arows, Acols, Avals, lcon, ucon, lvar, uvar.\n\n\n\n\n\n","category":"method"},{"location":"reference/#QuadraticModels.unconstrained_reductions!-Union{Tuple{T}, Tuple{AbstractVector{T}, Any, Any, AbstractVector{T}, AbstractVector{T}, AbstractVector{T}, AbstractVector{T}, Any}} where T","page":"Reference","title":"QuadraticModels.unconstrained_reductions!","text":"unbounded = unconstrained_reductions!(c, Hrows, Hcols, Hvals, lvar, uvar,\n                                      xps, lin_unconstr_vars)\n\nFix linearly unconstrained variables, updating the corresponding elements of xps. This only works for linear problems for now, but can be extended to some specific quadratic problems.\n\n\n\n\n\n","category":"method"},{"location":"#QuadraticModels.jl","page":"Home","title":"QuadraticModels.jl","text":"","category":"section"},{"location":"tutorial/#QuadraticModels.jl-Tutorial","page":"Tutorial","title":"QuadraticModels.jl Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"You can check an Introduction to QuadraticModels.jl on our site, jso-docs.","category":"page"}]
}
